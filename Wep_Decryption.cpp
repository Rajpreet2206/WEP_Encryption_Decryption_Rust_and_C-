
#include<chrono>
#include <iostream>
#include <string>
#include <bitset>
#include <vector>
#include <cstdint>

int countCharacters(const std::string& str) {
    return str.size();
}
template<typename Duration, typename Function, typename... Args>
Duration time_taken_by_the_function(const std::string& function_name, Function&& function, Args&&... args) {
    auto Tstart = std::chrono::high_resolution_clock::now();
    std::forward<Function>(function)(std::forward<Args>(args)...);
    auto Tend = std::chrono::high_resolution_clock::now();
    auto time_duration = std::chrono::duration_cast<Duration>(Tend - Tstart);
    std::cout << "Executing the '" << function_name << "' took " << time_duration.count() << " microseconds" << std::endl;
    return time_duration;
}
std::string wep_decrypt(const std::string& ciphertext, const std::vector<uint8_t>& wep_key) {
    std::string plaintext;
    size_t key_length = wep_key.size();

    // Remove spaces from the binary ciphertext
    std::string binary_ciphertext = "";
    for (char c : ciphertext) {
        if (c != ' ') {
            binary_ciphertext += c;
        }
    }
    // Decrypt each byte from the binary ciphertext
    for (size_t i = 0; i < binary_ciphertext.size(); i += 8) {
        std::string byte_str = binary_ciphertext.substr(i, 8);
        uint8_t encrypted_byte = static_cast<uint8_t>(std::bitset<8>(byte_str).to_ulong());
        char decrypted_byte = encrypted_byte ^ wep_key[i / 8 % key_length];
        plaintext += decrypted_byte;
    }
    return plaintext;
}
int main() {
    std::string ciphertext
    std::vector<uint8_t> wep_key = { 0xAA, 0xBB, 0xCC, 0xDD, 0xEE };
    std::string decrypted_text = wep_decrypt(ciphertext, wep_key);
    int Characters_Count =  countCharacters(ciphertext);
    std::cout << "Number of characters: " << Characters_Count << std::endl;
    std::cout << "Ciphertext (binary): " << ciphertext << std::endl;
    std::cout << "Decrypted Text: " << decrypted_text << std::endl;
    auto duration = time_taken_by_the_function<std::chrono::microseconds>("wep_decrypt", wep_decrypt, ciphertext, wep_key);
    return 0;
}